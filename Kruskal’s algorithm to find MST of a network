#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Define a structure to represent an edge  
struct Edge {
    int src, dest, weight;  
};

// Define a structure to represent a subset for union-find  
struct Subset {
    int parent, rank;
};

// Compare function for sorting edges based on their weights  
bool compareEdges(const Edge& a, const Edge& b) {
    return a.weight < b.weight;
}

// Find set of an element in union-find (with path compression)  
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent); // Path compression
    return subsets[i].parent;
}

// Perform union of two subsets (by rank)  
void Union(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Kruskal's algorithm to find Minimum Spanning Tree (MST)  
void Kruskal(vector<Edge>& edges, int V) {
    // Sort the edges in non-decreasing order of their weights  
    sort(edges.begin(), edges.end(), compareEdges);

    // Allocate memory for creating V subsets  
    Subset* subsets = new Subset[V];

    // Create V subsets with single elements  
    for (int i = 0; i < V; ++i) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    // Initialize result to store MST edges  
    vector<Edge> result;

    // Number of edges to be taken is equal to V-1 (since it is a spanning tree)  
    int edgeIndex = 0;
    while (result.size() < V - 1) {
        // Pick the smallest edge and increment the index for the next iteration  
        Edge nextEdge = edges[edgeIndex++];

        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        // If including this edge doesn't cause a cycle, add it to the result  
        if (x != y) {
            result.push_back(nextEdge);
            Union(subsets, x, y);
        }
    }

    // Print the result: the edges in the MST  
    cout << "Edges in the Minimum Spanning Tree (MST):\n";
    for (const Edge& edge : result) {
        cout << "Vertex " << edge.src << " -- Vertex " << edge.dest << " == Weight " << edge.weight << endl;
    }

    // Cleanup  
    delete[] subsets;
}

int main() {
    int V, E;
    
    // Input number of vertices and edges  
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<Edge> edges(E);

    // Input each edge (source, destination, weight)
    cout << "Enter the edges (src, dest, weight):\n";
    for (int i = 0; i < E; ++i) {
        cout << "Edge " << i + 1 << " (src dest weight): ";
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    // Run Kruskal's algorithm to find MST
    Kruskal(edges, V);

    return 0;
}
